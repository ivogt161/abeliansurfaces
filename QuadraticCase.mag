
pPart:=function(M,p)
	if M ne 0 then
		return p^Valuation(M,p);
	else
		return 1;
	end if;
end function;

PoorMansConductor:=function(C)
	return &*[p:p in PrimeFactors(Integers()!Discriminant(C))];
end function;

PossibleEllGovernedByQuadratic:=function(C)
	N:=PoorMansConductor(C);
	c:=&*[p eq 2 select 8 else p: p in PrimeFactors(N)];
	D:=DirichletGroup(c);

	chars:=[&*s:s in Subsets(Set(Generators(D)))| #s gt 0];
	p:=3;
	MM:=[<phi,0>:phi in chars];
	repeat
		p:=NextPrime(p);
		if c mod p ne 0 then
			fp:=ReciprocalPolynomial(LPolynomial(ChangeRing(C,GF(p))));
			ap:=-Coefficient(fp,3);
			
			for j in [1..#MM] do
				phi:=MM[j][1];
				M:=MM[j][2];
	
				if phi(p) eq -1 then		
					M := GCD(M,p*ap);
					M:=Integers()!(M / (pPart(M,2)*pPart(M,3)));
					MM[j][2]:=M;
				end if;
			end for;
		end if;
	until &and[m[2] eq 1: m in MM] or p gt 96;
	return LCM([m[2]:m in MM]);
end function;

_<x>:=PolynomialRing(Rationals());
//f:=x^6 - x^3 - x + 1;
//C:=HyperellipticCurve(f);
//
//PossibleEllGovernedByQuadratic(C);

